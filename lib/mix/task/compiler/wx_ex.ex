defmodule Mix.Tasks.Compile.WxEx do
  @moduledoc """
  Compiler to produce an erlang source file in `src/wx_constants.erl`,
  containing wrapper functions for all the wxWidgets static macros.
  """
  use Mix.Task.Compiler

  @shared_header_root ~C"wx" |> :code.lib_dir() |> to_string() |> Path.join("include")
  @shared_constants_root "src"
  @shared_constants_ex_root "lib/generated/wx_ex"

  @wx_header_path Path.join(@shared_header_root, "wx.hrl")
  @wx_constants_erl_path Path.join(@shared_constants_root, "wx_constants.erl")
  @wx_constants_ex_path Path.join(@shared_constants_ex_root, "wx_constants.ex")

  @gl_header_path Path.join(@shared_header_root, "gl.hrl")
  @gl_constants_erl_path Path.join(@shared_constants_root, "gl_constants.erl")
  @gl_constants_ex_path Path.join(@shared_constants_ex_root, "gl_constants.ex")

  def run(_args) do
    @wx_constants_erl_path |> Path.dirname() |> File.mkdir_p!()
    wx_erl_constants = File.open!(@wx_constants_erl_path, [:write])

    @wx_constants_ex_path |> Path.dirname() |> File.mkdir_p!()
    wx_ex_constants = File.open!(@wx_constants_ex_path, [:write])

    @gl_constants_erl_path |> Path.dirname() |> File.mkdir_p!()
    gl_erl_constants = File.open!(@gl_constants_erl_path, [:write])

    @gl_constants_ex_path |> Path.dirname() |> File.mkdir_p!()
    gl_ex_constants = File.open!(@gl_constants_ex_path, [:write])

    write_erl(wx_erl_constants, :wx)
    write_erl(gl_erl_constants, :gl)

    write_ex(wx_ex_constants, :wx)
    write_ex(gl_ex_constants, :gl)

    @wx_header_path
    |> File.stream!()
    |> Stream.filter(&is_constant_macro?/1)
    |> Enum.each(fn line ->
      IO.write(wx_erl_constants, generate_erl_function(line, :wx))
      IO.write(wx_ex_constants, generate_ex_function(line, :wx))
    end)

    @gl_header_path
    |> File.stream!()
    |> Stream.filter(&is_constant_macro?/1)
    |> Enum.each(fn line ->
      IO.write(gl_erl_constants, generate_erl_function(line, :gl))
      IO.write(gl_ex_constants, generate_ex_function(line, :gl))
    end)

    IO.puts(wx_ex_constants, "end")
    IO.puts(gl_ex_constants, "end")

    File.close(wx_erl_constants)
    File.close(wx_ex_constants)
    File.close(gl_erl_constants)
    File.close(gl_ex_constants)
    :ok
  end

  defp write_erl(where, :wx) do
    text = ~S"""
    %% THIS FILE IS AUTOMATICALLY GENERATED
    %%
    %% @doc Function wrappers for the macros defined in wx.hrl. Note that all
    %% functions begin with lower case "wx": for example WXK_NONE is wrapped
    %% with the function wxK_NONE/0.

    -module(wx_constants).
    -compile(nowarn_export_all).
    -compile(export_all).
    -include_lib("wx/include/wx.hrl").
    """

    IO.write(where, text)
  end

  defp write_erl(where, :gl) do
    text = ~S"""
    %% THIS FILE IS AUTOMATICALLY GENERATED
    %%
    %% @doc Function wrappers for the macros defined in gl.hrl. Note that all
    %% functions begin with lower case "gl": for example GL_COLOR_BUFFER_BIT is wrapped
    %% with the function gl_COLOR_BUFFER_BIT/0.

    -module(gl_constants).
    -compile(nowarn_export_all).
    -compile(export_all).
    -include_lib("wx/include/gl.hrl").
    """

    IO.write(where, text)
  end

  defp write_ex(where, :wx) do
    text = ~S'''
    # THIS FILE IS AUTOMATICALLY GENERATED

    defmodule WxEx.Constants.Wx do
      @moduledoc """
      Function wrappers for the macros defined in `wx.hrl`. Note that all
      functions begin with lower case "wx": for example `WXK_NONE` is wrapped
      with the function `wxK_NONE/0`.
      """

    '''

    IO.write(where, text)
  end

  defp write_ex(where, :gl) do
    text = ~S'''
    # THIS FILE IS AUTOMATICALLY GENERATED

    defmodule WxEx.Constants.Gl do
      @moduledoc """
      Function wrappers for the macros defined in `gl.hrl`. Note that all
      functions begin with lower case "gl": for example `GL_COLOR_BUFFER_BIT` is wrapped
      with the function `gl_COLOR_BUFFER_BIT/0`.
      """

    '''

    IO.write(where, text)
  end

  defp is_constant_macro?("-define(" <> _), do: true
  defp is_constant_macro?(_), do: false

  defp generate_erl_function(line, :wx) do
    String.replace(line, ~r/-define\((wx)(\w*).*/i, "wx\\2() -> ?\\1\\2.")
  end

  defp generate_erl_function(line, :gl) do
    String.replace(line, ~r/-define\((gl)(\w*).*/i, "gl\\2() -> ?\\1\\2.")
  end

  defp generate_ex_function(line, :wx) do
    String.replace(line, ~r/-define\((wx)(\w*).*/i, "  def wx\\2, do: :wx_constants.wx\\2()")
  end

  defp generate_ex_function(line, :gl) do
    String.replace(line, ~r/-define\((gl)(\w*).*/i, "  def gl\\2, do: :gl_constants.gl\\2()")
  end

  def clean do
    Enum.each(
      [@gl_constants_erl_path, @wx_constants_erl_path, @gl_constants_ex_path, @wx_constants_ex_path],
      &File.rm_rf!/1
    )
  end
end
